#!/usr/bin/env python
# -*- coding: iso-8859-1 -*-

from sys import argv, exit
from wellpapp import Client
from re import match
from os.path import exists
from os import readlink

def implfmt(impl):
	guid, prio = impl
	data = client.get_tag(guid, with_prefix=True)
	return u"\n\t" + data.pname + u" " + unicode(prio)

def show_implies(guid, heading, reverse):
	impl = client.tag_implies(guid, reverse)
	if impl: print heading + u"".join(sorted(map(implfmt, impl)))

def fmt_tag(tag):
	if tag.value:
		val = u" = " + unicode(tag.value)
	else:
		val = u""
	return tag.pname + val

def show_post(m, short=False):
	post = client.get_post(m, True, ["tagname", "tagdata", "datatags", "ext", "created", "width", "height"])
	if not post:
		print "Post not found"
		return 1
	print m + " created " + post.created.localtimestr()
	if not short:
		print post["width"], "x", post["height"], post["ext"]
	try:
		path = readlink(client.image_path(m))
		if not exists(path):
			path += " (MISSING)"
	except Exception:
		path = "MISSING"
	print "Original file: " + path
	if short: return 0
	tags = [fmt_tag(t) for n, t in sorted(post.datatags.items())]
	if tags:
		print "Data:\n\t",
		print u"\n\t".join(sorted(tags))
	print "Tags:\n\t",
	tags = [fmt_tag(t) for t in post.fulltags] + [fmt_tag(t) for t in post.weaktags]
	print u"\n\t".join(sorted(tags))
	tags = [fmt_tag(t) for t in post.implfulltags] + [fmt_tag(t) for t in post.implweaktags]
	if tags:
		print "Implied:\n\t",
		print u"\n\t".join(sorted(tags))
	rels = client.post_rels(m)
	if rels:
		print "Related posts:\n\t" + "\n\t".join(rels)
	return 0

def show_tag(name, short=False):
	guid = client.find_tag(name)
	if not guid and match(r"(?:\w{6}-){3}\w{6}", name):
		guid = name
	if not guid:
		print "Tag not found"
		return 1
	data = client.get_tag(guid)
	if not data:
		print "Tag not found"
		return 1
	print "Tag:", data["name"]
	if "alias" in data and data["alias"]:
		print "Aliases:", " ".join(data["alias"])
	print "GUID:", guid
	print "Type:", data["type"]
	if "valuetype" in data and data["valuetype"]:
		print "Valuetype:", data["valuetype"]
	if short: return 0
	print data["posts"], "posts"
	print data["weak_posts"], "weak posts"
	show_implies(guid, u"Implies:", False)
	show_implies(guid, u"Implied by:", True)
	flags = [f for f in data if data[f] is True]
	if flags:
		print "Flags:\n\t", "\n\t".join(flags)
	return 0

if __name__ == "__main__":
	new_argv = []
	short = False
	for a in argv[1:]:
		if a == "-q":
			short = True
		else:
			new_argv.append(a)
	if len(new_argv) < 1:
		print "Usage:", argv[0], "post-spec or tagname [...]"
		exit(1)
	client = Client()
	ret = 0
	for object in new_argv:
		object = client.postspec2md5(object, object)
		if match(r"^[0-9a-f]{32}$", object):
			ret |= show_post(object, short)
		else:
			ret |= show_tag(object, short)
		if len(new_argv) > 1: print
	exit(ret)
